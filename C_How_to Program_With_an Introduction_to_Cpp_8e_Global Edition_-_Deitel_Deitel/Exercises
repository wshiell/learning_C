5. a) - incrementation variable not declared (should be type int
        or unsigned int)
   b) - missing break statement for first case, so the switch
        statement will print "Even integer" as well as "Odd
        integer" regardless of whether an integer is even or odd
   c) - variable salary not initialised outside of loop
      - variable year will only be available inside loop, so
        the printf statement will not have access to it
      - variable year should be declared unsigned
   d) - missing braces (not technically wrong)
      - using type double in a condition is incorrect;
        should change statement so as to eliminate floating
	point numbers in the for header
   e) - x % 3 == 0 should not be in the for header, it should
        be included in the loop body
	ie.
	   if ( x % 3 == 0) {
	     printf("%d ", x);
           }
	   else {
             printf("");
           }
   f) - variable is not incremented, so the loop will not
        terminate
   g) - variable x has not had its type declared as int
        (or unsigned int)

6. a) 20, 17, 14, 11, 8, 5
   b) 10, 15, 20, 25
   c) 2, 6, 10, 14, 18
   d) 30, 24, 18
   e) 22, 17, 12, 7

7. a) for (unsigned int x = 1; x <= 14; x += 2) {
        printf("%u\n", x);
      }
   b) for (unsigned int x = 2; x < 18; x += 3) {
        printf("%u\n", x);
      }
   c) for (unsigned int x = 30; x >= -30; x -= 10) {
        printf("%u\n", x);
      }
   d) for (unsigned int x = 15; x <= 55; x += 8) {
        printf("%u\n", x);
      }

8. This program prints a diagonal lines of @'s, from the top
   left to the bottom right

9. See ex_9.c

10. See ex_10.c

11. See ex_11.c

12. See ex_12.c

13. See ex_13.c

14. The difficulty in calculating 21! lies in the fact that the values of
    n! become rapidly large, and would quickly grow larger than the
    integer types of C could accomodate
    (See ex_14.c)

15. See ex_15.c

16. See ex_16.c

17. See ex_17.c

18. See ex_18.c

19. See ex_19.c

20. 0, 1, 1, 1, 0

21. See ex_21.c

22. See ex_22.c

23. See ex_23.c

24. a) 1
    b) 1
    c) 0
    d) 0
    e) 1
    f) 1
    g) 1
    h) 0
    i) 0
    j) 0

25. See ex_25.c

26. Terms before 3.1:		119
    Terms before 3.14:		1696
    Terms before 3.141:		5062
    Terms before 3.1415:	9224
    Terms before 3.14159:	precision insufficent to determine
    See ex_26.c

27. See ex_27.c

28. See ex_28.c

29. a) !(x < 5) && !(y >= 7), !((x < 5) || (y >= 7))
    b) !(a == b) || !(g != 5), !((a == b) && (g != 5))
    c) !((x <= 8) && (y > 4)), !((x <= 8) || (y > 4))
    d) !((i > 4) || (j <= 6)), !((i > 4) && (j <= 6))
    See ex_29.c

30. See ex_30a.c & ex_30b.c

31. See ex_31.c

32. See ex_32.c

33. See ex_33.c

34. In order to replace a do...while loop with a while loop, it is necessary
    to add statements before the while loop starts to ensure that the body of
    the loop is executed at least once
    ie.
	do loop:		PROGRAM BODY
	   			  |
				  |
				ACTION
			          |
			          |<-------|
				  |        |
				CONDITION---
				  |
				  |
				PROGRAM BODY


       while loop 		PROGRAM BODY
	   			  |				
                            	  |<-------|
				  |	   |
			       CONDTION    |
				  |	   |
				  |        |
				ACTION------
				  |	   
				  |	   
				PROGRAM BODY

    If a do...while loop is recplaced by a while loop, there is the risk that
    the body of the loop won't be executed at least once, which may cause the
    program to run incorrectly
    In order to make the program run effectively when subsititing a do...while
    loop with a while loop, you could add a sequential control statement
    before the start of the loop, which would include the body of the loop.
    ie.
			      PROGRAM BODY
			      	  |
			       SEQUENTIAL
		       	        CONTROL
			       STATEMENT
	   			  |				
                            	  |<-------|
				  |	   |
			       CONDTION    |
				  |	   |
				  |        |
				ACTION------
				  |	   
				  |	   
				PROGRAM BODY

35. In order to leave a loop without using a break statment, it would be
    necessary to make the continuation condition false. Thus, replacing a
    break statement with a statement that causes the continuation condition
    to become untrue would solve the problem.

36. The statement prints a right angled triangle of length 4, with rows
    comprised of numbers, each row identical in length to the numbers display
    on it.
           XXX THE PROGRAM SEGMENT PRINTS THE FIRST 10 NATURAL NUMBERS,
	   STARTING IN THE TOP POSITION AND WORKING ALONG EACH SUBSEQUENT
	   ROW

37. To remove a continue statement from a program, it is necessary to allow
    the program to continue in the loop, but without executing the portion
    of the loop after the continue. In order to do this, replace the continue
    statement with an expression equal to the next value of the continuation
    condition

38. See ex_38.c

39. -

40. See ex_40.c

41. See ex_41.c
