7. a) %value - the % does not belong
   b) missing a third argument; conversion specifier is incorrect (?)
   c) the expression should be evaluated on the right side of the assignment        operator
   d) semi-colon after argument of if() is incorrect; assignment operator
      confused with equality operator
   e) backslashes used instead of forward slashes in comment
   f) ampersand missing in the second argument for the scanf function
   g) incorrect number of conversion specifiers given number of variables;
      division operator used instead of remainder operator
   h) semi-colon used after argument of if() function; variables in the
      argument for printf are in the format control string
   i) print instead of printf
   j) incorrec number of format control strings - should combine all
      conversion specifiers in one string; variables should each occupy
      distinct arguments

8. a) variables
   b) case sensitive
   c) a double forward slash //
   d) keywords
   e) comments and white space

9. a) printf( "%s", "Have a nice day." );
   b) a = b + c;
   c) if ( a > b) {
         c = b - a;
      }
   d) scanf( "%d %d %d", &p, &q, &r);

10. a) false. C is case sensitive, so main and Main are different functions
    b) true
    c) false. The statement should use the equality operator == to check this
    d) false. They are formed using any statement that evaluates to either
       zero or a non zero value
    e) _3g is valid, but not recommended; my_val valid, but myVal is a better        choice; h22 is valid; 123greetings is not valid (should not begin with
       a digit); July98 is valid

11. a) conditional
    b) ignored
    c) #include <stdio.h>

12. a) 3
    b) 5
    c) b=
    d) a = 15
    e) 19 = a + b
    f) Nothing
    g) Nothing
    h) Nothing
    i) blank line

13. a) no
    b) yes - a and be are replaced by user input
    c) variable sum is replaced by a + b
    d) no

14. a) correct
    b) incorrect
    c) incorrect
    d) correct
    e) incorrect
    f) incorrect

15. a) x = 8 + 15 * ( 6 - 2 ) - 1;
       (),*,+,-
       67
    b) x = 5 % 5 + 5 * 5 - 5 / 5;
       %,*,/,+,-
       24
    c) x = (5 * 7 * ( 5 + (7 * 5 / (7) ) ) );
       rightmost *, +, second *, first *
       350

16. See ex_16.c

17. See ex_17.c

18. See ex_18.c

19. See ex_19.c

20. See ex_20.c

21. See ex_21.c

22. A five by five right angled triangle, with the right angle bottom left
    (see ex_22.c)

23. See ex_23.c (exercise needs fixing to eliminate superfluous lines of text)

24. See ex_24.c

25. See ex_25.c

26. See ex_26.c

27. See ex_27.c

28. A fatal error will cause a program to crash as soon as the error is
    encountered, whereas a non fatal error will allow the program to run
    to completion and cause erroneous results.
    It is better to have a fatal error occur as it is easier to diagnose that
    there is a problem than if the program
    were to appear to run correctly.

29. See ex_29.c

30. See ex_30.c

31. See ex_31.c

32. See ex_32.c

33. See ex_33.c